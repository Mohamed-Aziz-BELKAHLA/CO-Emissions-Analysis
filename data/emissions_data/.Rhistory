# Load necessary libraries
install.packages("nortest")
install.packages("reshape2")
install.packages("ggplot2")
install.packages("lmtest")
install.packages("sandwich")
install.packages("car")
library(nortest)
library(reshape2)
library(ggplot2)
library(lmtest)
library(sandwich)
library(car)
# Load the datasets interactively
cat("Please select the file for gt_2011.csv\n")
gt_2011 <- read.csv(file.choose(), header = TRUE, sep = ",", dec = ".")
cat("Please select the file for gt_2012.csv\n")
gt_2012 <- read.csv(file.choose(), header = TRUE, sep = ",", dec = ".")
cat("Please select the file for gt_2013.csv\n")
gt_2013 <- read.csv(file.choose(), header = TRUE, sep = ",", dec = ".")
cat("Please select the file for gt_2014.csv\n")
gt_2014 <- read.csv(file.choose(), header = TRUE, sep = ",", dec = ".")
cat("Please select the file for gt_2015.csv\n")
gt_2015 <- read.csv(file.choose(), header = TRUE, sep = ",", dec = ".")
# Check if the data loaded correctly
if (!exists("gt_2011") || !exists("gt_2012") || !exists("gt_2013") || !exists("gt_2014") || !exists("gt_2015")) {
  stop("One or more datasets failed to load. Please check the file selection.")
}
# Add the Year column to each dataset
gt_2011$Year <- 2011
gt_2012$Year <- 2012
gt_2013$Year <- 2013
gt_2014$Year <- 2014
gt_2015$Year <- 2015
# Combine all datasets into a single dataframe
gt_data <- rbind(gt_2011, gt_2012, gt_2013, gt_2014, gt_2015)
# Check for missing values
colSums(is.na(gt_data))
# Function to find outliers using IQR
find_outliers <- function(data) {
  Q1 <- quantile(data, 0.25, na.rm = TRUE)
  Q3 <- quantile(data, 0.75, na.rm = TRUE)
  IQR <- Q3 - Q1
  lower_bound <- Q1 - 1.5 * IQR
  upper_bound <- Q3 + 1.5 * IQR
  outliers <- data < lower_bound | data > upper_bound
  return(outliers)
}
# Replace outliers with NA
for(i in 1:ncol(gt_data)) {
  if(is.numeric(gt_data[, i])) {
    outliers <- find_outliers(gt_data[, i])
    gt_data[outliers, i] <- NA
  }
}
# Impute missing values with the column median
for(i in 1:ncol(gt_data)) {
  if(is.numeric(gt_data[, i])) {
    gt_data[, i][is.na(gt_data[, i])] <- median(gt_data[, i], na.rm = TRUE)
  }
}
# Normality check for all features (excluding CO)
features <- names(gt_data)[-which(names(gt_data) == "CO")]
normality_results <- sapply(features, function(x) shapiro.test(gt_2011[[x]])$p.value)
print(normality_results)
# Correlation matrix (Spearman)
spearman_matrix <- cor(gt_data[, c("AT", "AP", "AH", "AFDP", "TIT", "TAT", "TEY", "CDP", "CO")], method = "spearman")
print(spearman_matrix)
# Heatmap of correlation matrix
cor_melted <- melt(spearman_matrix, varnames = c("Var1", "Var2"), value.name = "value")
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
  geom_tile() +
  scale_fill_gradient2(midpoint = 0, low = "blue", high = "red", mid = "white") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Spearman Correlation Heatmap", x = "Variables", y = "Variables")
# Fit a linear regression model
model <- lm(CO ~ AT + AP + AH + AFDP + GTEP + TIT + TAT + TEY + CDP + NOX, data = gt_data)
summary(model)
# Remove AFDP and TEY from the model
model_revised <- lm(CO ~ AT + AP + AH + GTEP + TIT + TAT + CDP + NOX, data = gt_data)
summary(model_revised)
# Residual analysis
qqnorm(residuals(model_revised))
qqline(residuals(model_revised))
hist(resid(model_revised), main = "Histogram of Residuals", xlab = "Residuals", breaks = 50)
plot(model_revised$fitted.values, resid(model_revised),
     main = "Residuals vs Fitted Values",
     xlab = "Fitted Values", ylab = "Residuals",
     pch = 20)
abline(h = 0, col = "red", lwd = 2)
bptest(model_revised)
# Robust standard errors
robust_se <- vcovHC(model_revised, type = "HC1")
coeftest(model_revised, vcov = robust_se)
# Multicollinearity check
vif(model_revised)
# Reassess the model by removing GTEP and CDP
model_updated <- lm(CO ~ AT + AP + AH + TIT + TAT + NOX, data = gt_data)
summary(model_updated)
# Remove AP from the model
model_refined <- lm(CO ~ AT + AH + TIT + TAT + NOX, data = gt_data)
summary(model_refined)
# Multicollinearity check for the refined model
vif(model_refined)
# ANOVA
anova(model_refined)
library(shiny)
library(shinydashboard)
library(ggplot2)
# Define UI
ui <- dashboardPage(
  dashboardHeader(title = "CO Emissions Analysis"),
  dashboardSidebar(
    fileInput("file", "Upload CSV File", accept = c(".csv")),
    selectInput("xvar", "X Variable:", choices = NULL),
    selectInput("yvar", "Y Variable:", choices = NULL, selected = "CO")
  ),
  dashboardBody(
    fluidRow(
      box(plotOutput("scatterPlot"), width = 12)
    ),
    fluidRow(
      box(verbatimTextOutput("modelSummary"), width = 12)
    )
  )
)
# Define server logic
server <- function(input, output, session) {
  data <- reactive({
    req(input$file)
    read.csv(input$file$datapath, header = TRUE, sep = ",", dec = ".")
  })
  observe({
    req(data())
    updateSelectInput(session, "xvar", choices = names(data()))
    updateSelectInput(session, "yvar", choices = names(data()))
  })
  output$scatterPlot <- renderPlot({
    req(data(), input$xvar, input$yvar)
    ggplot(data(), aes_string(x = input$xvar, y = input$yvar)) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      theme_minimal()
  })
  output$modelSummary <- renderPrint({
    req(data(), input$xvar, input$yvar)
    model <- lm(as.formula(paste(input$yvar, "~", input$xvar)), data = data())
    summary(model)
  })
}
# Run the app
shinyApp(ui = ui, server = server)
# Install the required packages
install.packages("shiny")
install.packages("shinydashboard")
# Load the libraries
library(shiny)
library(shinydashboard)
library(ggplot2)
library(shiny)
library(shinydashboard)
library(ggplot2)
# Define UI
ui <- dashboardPage(
  dashboardHeader(title = "CO Emissions Analysis"),
  dashboardSidebar(
    fileInput("file", "Upload CSV File", accept = c(".csv")),
    selectInput("xvar", "X Variable:", choices = NULL),
    selectInput("yvar", "Y Variable:", choices = NULL, selected = "CO")
  ),
  dashboardBody(
    fluidRow(
      box(plotOutput("scatterPlot"), width = 12)
    ),
    fluidRow(
      box(verbatimTextOutput("modelSummary"), width = 12)
    )
  )
)
# Define server logic
server <- function(input, output, session) {
  data <- reactive({
    req(input$file)
    read.csv(input$file$datapath, header = TRUE, sep = ",", dec = ".")
  })
  observe({
    req(data())
    updateSelectInput(session, "xvar", choices = names(data()))
    updateSelectInput(session, "yvar", choices = names(data()))
  })
  output$scatterPlot <- renderPlot({
    req(data(), input$xvar, input$yvar)
    ggplot(data(), aes_string(x = input$xvar, y = input$yvar)) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE) +
      theme_minimal()
  })
  output$modelSummary <- renderPrint({
    req(data(), input$xvar, input$yvar)
    model <- lm(as.formula(paste(input$yvar, "~", input$xvar)), data = data())
    summary(model)
  })
}
# Run the app
shinyApp(ui = ui, server = server)
